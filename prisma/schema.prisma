// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // Uncomment for deployment to Vercel or other serverless platforms
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          String    @default("user") // user, company, admin
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  applications  Application[]
  companyProfile Company?
  savedJobs     SavedJob[]
}

model Company {
  id           String   @id @default(cuid())
  userId       String   @unique
  name         String
  logo         String?
  industry     String?
  location     String?
  website      String?
  description  String?
  mission      String?
  culture      String?
  benefits     String?
  employeeCount Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs         Job[]
}

model Job {
  id           String   @id @default(cuid())
  title        String
  companyId    String
  location     String?
  type         String   // full-time, part-time, contract, etc.
  salary       String?
  department   String?
  experience   String?
  description  String?
  requirements String?
  status       String   @default("active") // active, filled, closed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications Application[]
  savedBy      SavedJob[]
}

model Application {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  resume      String?
  coverLetter String?
  status      String   @default("pending") // pending, reviewed, interviewed, offered, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model SavedJob {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}
